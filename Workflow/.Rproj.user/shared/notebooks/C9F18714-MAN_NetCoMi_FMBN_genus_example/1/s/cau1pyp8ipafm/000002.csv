"0",""
"0","if(keep_time) tic(""loading phyloseq objects"")"
"0","# obtain the list of files in the input folder"
"0","input_file_list <- list.files(file.path(data_folder))"
"0","# manage .rdata files first (but they must be phyloseq objects or will be deleted later)"
"0","rdata_input_file_list <- input_file_list[str_detect(input_file_list, "".rdata|.Rdata|.RDATA"")] "
"0","# get the list .Rdata"
"0","rdata_names_list <- str_remove(rdata_input_file_list, "".rdata|.Rdata|.RDATA"")"
"0","rdata_path_list <- file.path(data_folder,rdata_input_file_list)"
"0","# load and save as .rds, remove objects and files"
"0","for (i in seq_along(rdata_path_list)){"
"0","  load(rdata_path_list[i]) # loads the object as physeqdata"
"0","  saveRDS(physeqdata, file.path(data_folder, paste(rdata_names_list[i],"".rds"",sep="""")))"
"0","  rm(physeqdata)"
"0","  file.remove(rdata_path_list[i])"
"0","}"
"0",""
"0","# get the names for the .rds files"
"0",""
"0","input_file_list <- list.files(file.path(data_folder))"
"0","rds_input_file_list <- input_file_list[str_detect(input_file_list, "".rds|.RDS"")] "
"0","names_list <- str_remove(rds_input_file_list, "".rds|.RDS"")"
"0","rds_path_list <- file.path(data_folder,rds_input_file_list)"
"0","# load all the files in a list using a functional"
"0","physeq_list <- lapply(rds_path_list, readRDS)"
"0","# check if all are phyloseq objects"
"0","is_phyloseq <- sapply(physeq_list, function(x) class(x)==""phyloseq"")"
"0","# clean up the list if necessary and give names"
"0","physeq_list <- physeq_list[is_phyloseq]"
"0","names(physeq_list) <- names_list[is_phyloseq]"
"0","# if process_batch == F need to indicate which is to be processed; defaults to the first element of the list"
"0","# so, it is easier if you just have one element in the folder"
"0","item_to_process <- item <- NA_integer_"
"0","if(!process_batch) {item <- ifelse(is.na(item_to_process), 1, item_to_process)}"
"0","if(!is.na(item)){"
"0","  physeq_list <- physeq_list[item]"
"0","  }"
"0",""
"0",""
"0","# should check if this is too large"
"0","# size_limit "
"0","size_limit <- 500e6L"
"0","physeq_size <- obj_size(physeq_list)"
"0","size_warning <- ifelse(as.numeric(physeq_size)>size_limit,"
"0","                       ""WARNING: too much data to process"","
"0","                       paste(""object size"", as.character(physeq_size), "" B"", sep = "" "")) "
"0","# load the study metadata (if not available or not properly formatted the script will create a suitable data frame)"
"0","# no input required, should work with defaults"
"0","study_metadata <- load_metadata()"
"2","
[36mâ”€â”€[39m [1m[1mColumn specification[1m[22m [36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[39m
cols(
  .default = col_character(),
  read_length_bp = [32mcol_double()[39m,
  samples = [32mcol_double()[39m
)
[36mâ„¹[39m Use [38;5;235m[48;5;253m[38;5;235m[48;5;253m`spec()`[48;5;253m[38;5;235m[49m[39m for the full column specifications.

"
"0","# print the study metadata"
"0","study_metadata %>% "
"0","  dplyr::select(label:studyId, samples, short_descr, type, ref_short)"
