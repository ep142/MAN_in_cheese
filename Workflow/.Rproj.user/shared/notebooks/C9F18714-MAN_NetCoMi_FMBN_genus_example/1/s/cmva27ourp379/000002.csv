"0",""
"0","### processing and folders ###"
"0","# the following command detects the number of cores on UNIX/MacOS"
"0","ncores <- parallel::detectCores(logical = F) # to detect physical cores in MacOS"
"0","# the name of the folder containing the phyloseq objects"
"0","data_folder <- ""input_data"""
"0","# the name of the folder containing additional functions + optional data (like the lookup table)"
"0","source_folder <- ""source"""
"0","# the name of the output folder"
"0","output_folder <- ""netcompare_output"""
"0","process_batch <- T"
"0","# if true, all phyloseqs in the subfolder physeqobj will be processed in batch (may take time)"
"0",""
"0","# some graph options, shared everywhere"
"0","dpi_option <- 300"
"0","g_type <- ""tiff"" "
"0",""
"0","# use a lookup table to fix the genera and families for Lactobacillales"
"0","use_lookup <- T"
"0","if(use_lookup){"
"0","  lookup_table <- read_tsv(file.path(""source"", ""lookup_lactobacillus.txt""), col_types = ""cccccc"")"
"0","}"
"0",""
"0","out_filename_pref <- ""MAN_FMBN_genus_3"" # the prefix which will be used for all output filenames"
"0",""
"0","### filtering options ###"
"0","min_samples <- 20"
"0","# the minimum number of samples in the data set: studies with < min_samples after filtering will be excluded from the analysis"
"0","min_seqs <- 1000"
"0","# the minimum number of sequences per sample"
"0",""
"0","# removes uncharacterized taxa (i.e. taxa missing the identification at the phylum level or above)"
"0","rm_unchar <- T"
"0","# remove Eukaryota"
"0","rm_euk <- T"
"0","# remove chlorophalsts and mitochondria"
"0","rm_chlmit <- T"
"0","# taxonomic agglomeration options: ""none"" means no aggregation; if the input data are ASVs or OTUs they will be used as such"
"0","# if the input file is from FMBN data in the original datasets are aggregated at different taxonomic levels."
"0","# when comparing datasets obtained using different gene targets or pipelines should be set to ""genus"""
"0","# ""none"", ""genus"", or ""family""); do not use species, will most likely cause errors"
"0","taxglom <- ""genus"" # tax glom will be performed at the genus level"
"0","# remove taxa which are uncharacterized at the family, order and class level (should not be very many in most datasets)"
"0","above_genus_flag <- T"
"0","# prevalence and abundance filter"
"0","# flag to decide if OTU should be filtered, i.e. if the filter is to be applied at all"
"0","filterOTUs <- TRUE"
"0","# flag to set the application of a prevalence filter"
"0","prev_filter <- TRUE"
"0","# the threshold of the filter, as fraction of samples"
"0","prev_threshold <- 0.05"
"0","# the abundance as fraction of sequences (in at least one sample)"
"0","ab_threshold <- 0.005"
"0","pass_both <- TRUE "
"0","# if true an OTU must pass both abundance and prevalence filter, otherwise"
"0","# passing either is enough"
"0","# options for saving output of prevalence and abundance filter"
"0","save_prev_ab_plot <- T"
"0","# flag for saving the prev ab plot"
"0","print_prev_ab_plot <- F"
"0","# flag for printing the plot"
"0","save_prev_table <-T "
"0","# flag for saving the prevalence and abundance table; should be saved because it can be used later"
"0","# to add info to the node stats"
"0","save_prev_ab_list <-T"
"0",""
"0","# a vector with the methods used for inference, use the spelling used in `netConstruct()`"
"0","# seeNetCoMi documentation for a lsit of available methods and options;"
"0","# the first method is the one which will be used to do comparisons within sample"
"0","# if you want to run just one list only that"
"0",""
"0","inf_methods <- c(""spieceasi"", ""spring"", ""sparcc"", ""ccrepe"")"
"0",""
"0","# the list of parameters to be passed in `netConstruct()` for each of the methods;"
"0","# there must be one entry for each of he parameters in the list"
"0","# some parameters are not really needed and will be ignored"
"0","inf_methods_param <- list("
"0","  spieaceasi = list("
"0","    sparMethod = ""t-test"","
"0","    alpha = 0.001,"
"0","    measureParList = list("
"0","      method = 'mb',"
"0","      lambda.min.ratio = 1e-2,"
"0","      nlambda = 20,"
"0","      pulsar.params = list(rep.num ="
"0","                             50)"
"0","    ),"
"0","    normmethodPar = ""none"","
"0","    zeromethodPar = ""none"","
"0","    dissFuncPar = ""signed"","
"0","    verbosePar = 1"
"0","  ),"
"0","  spring = list("
"0","    sparMethod = ""t-test"","
"0","    alpha = 0.001,"
"0","    measureParList = list(nlambda = 50, rep.num = 50),"
"0","        normmethodPar = ""none"","
"0","    zeromethodPar = ""none"","
"0","    dissFuncPar = ""signed"","
"0","    verbosePar = 1"
"0","  ),"
"0","  sparcc = list("
"0","    sparMethod = ""t-test"","
"0","    alpha = 0.001,"
"0","    measureParList = list(iter = 100, inner_it = 20, th = 0.05),"
"0","    normmethodPar = ""none"","
"0","    zeromethodPar = ""none"","
"0","    dissFuncPar = ""signed"","
"0","    verbosePar = 1"
"0","  ),"
"0","  ccrepe = list("
"0","    sparMethod = ""t-test"","
"0","    alpha = 0.001,"
"0","    measureParList = NULL,"
"0","    normmethodPar = ""fractions"","
"0","    zeromethodPar = ""none"","
"0","    dissFuncPar = ""signed"","
"0","    verbosePar = 1"
"0","  )"
"0",")"
"0",""
"0","# options for network analysis"
"0","# do Venn plot"
"0","do_Venn <- T"
"0","# calculates edge betweenness"
"0","calc_e_betw <-T"
"0","# merge node stats"
"0","merge_node_stats <- T"
"0",""
"0","# build and save a list with the options, for reproducibility"
"0","option_list <- list("
"0","  general_options = list("
"0","    ncores = ncores,"
"0","    data_folder = data_folder,"
"0","    source_folder = source_folder,"
"0","    output_folder = output_folder,"
"0","    process_batch = process_batch,"
"0","    use_lookup = use_lookup,"
"0","    out_filenames = out_filename_pref,"
"0","    gres = dpi_option,"
"0","    gtype = g_type"
"0","  ),"
"0","  methods_options = list("
"0","    methods = inf_methods,"
"0","    parameters = inf_methods_param"
"0","  ),"
"0","  filtering_options = list("
"0","    min_samples = min_samples,"
"0","    min_seqs = min_seqs,"
"0","    glom_taxa = taxglom,"
"0","    rmunchar_dp = rm_unchar,"
"0","    rmchlmit = rm_chlmit,"
"0","    rmeuk = rm_euk,"
"0","    rmunchar_cof = above_genus_flag,"
"0","    filter_OTUs = filterOTUs,"
"0","    prevfilter = prev_filter,"
"0","    prevthreshold = prev_threshold,"
"0","    abthreshols = ab_threshold,"
"0","    passboth = pass_both,"
"0","    saveprevabplot = save_prev_ab_plot, "
"0","    printprevabplot = print_prev_ab_plot,"
"0","    saveprevabtable = save_prev_table,"
"0","    save_prev_ab_list = save_prev_ab_list"
"0","  ),"
"0","  netstat_options = list("
"0","    doVenn = do_Venn,"
"0","    calcEbetw = calc_e_betw,"
"0","    mergeNstats = merge_node_stats"
"0","  )"
"0",")"
"0",""
"0","save(option_list, file = file.path(output_folder, paste(out_filename_pref,""_options.Rdata"")))"
"0",""
"0",""
"0","ext_functions <- print_function_report()"
"0","if(verbose_output) {"
"0","  print(ext_functions)"
"0","  print(option_list)"
"0","  }"
