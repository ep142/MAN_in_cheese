"0",""
"0","# extract node properties"
"0","# using a loop takes slightly longer that using functionals but handles names better"
"0","# note that when using ASVs comparing nodes between datasets does not make much sense"
"0",""
"0","if(keep_time) tic(""Extracting node properties"")"
"0",""
"0","node_stats <- vector(""list"", length = length(net_stats))"
"0","for (i in seq_along(net_stats)) {"
"0","  node_properties <- node_stat_list[[i]]"
"0","  "
"0","  if(verbose_output) cat(""extracting node stats for"", names(net_stats)[i],""\n"")"
"0","  for (j in seq_along(net_stats[[i]])) {"
"0","    if (class(net_stats[[i]][[j]]) == ""microNetProps"") {"
"0","      node_stats[[i]][[j]] <- extract_node_stats(net_stat_list = net_stats[[i]][[j]], "
"0","                                                 nodestat = node_properties)"
"0","      method <- names(net_stats[[i]])[j]"
"0","      dataset <- names(net_stats)[i]"
"0","      nrows <- nrow(node_stats[[i]][[j]])"
"0","      node_stats[[i]][[j]] <- bind_cols("
"0","        dataset = rep(dataset,nrows),"
"0","        method = rep(method,nrows),"
"0","        node_stats[[i]][[j]]"
"0","        )"
"0","    } else {"
"0","      cat(""no node stats to return for"","
"0","          names(net_stats)[i],"
"0","          names(node_stats[[i]])[j],"
"0","          ""\n"")"
"0","      next"
"0","    }"
"0","  }"
"0","  node_stats[[i]]<-bind_rows(node_stats[[i]])"
"0","}"
"1","extracting node stats for"
"1"," "
"1","ST106_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"1","no node stats to return for"
"1"," "
"1","ST106_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"1","extracting node stats for"
"1"," "
"1","ST110_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"1","extracting node stats for"
"1"," "
"1","ST115_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"1","no node stats to return for"
"1"," "
"1","ST115_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"1","extracting node stats for"
"1"," "
"1","ST131_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"1","no node stats to return for"
"1"," "
"1","ST131_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"1","extracting node stats for"
"1"," "
"1","ST136_FMBN_ps"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"2","Joining, by = ""label""
"
"0","node_stats_df <- bind_rows(node_stats)"
"0","# perform some tidying"
"0","node_stats_df <- node_stats_df %>%"
"0","  tidyr::separate(dataset, into = c(""Study"", ""Accn_n"", ""suf""), sep = ""_"", remove = F) %>% "
"0","  dplyr::select(-Accn_n, -suf) %>%"
"0","  mutate(label2 = if_else(!str_detect(dataset, ""FMBN""),str_c(label, Study, sep = ""_""), label))"
"0",""
"0","# label2 is only necessary when using ASVs or OTUs, not if there has been taxonomic agglomeration"
"0","# consider removing the mutate instruction"
"0",""
"0","write_tsv(node_stats_df, file = paste(file.path(output_folder,out_filename_pref), ""_nodestats_df.txt"",sep=""""))"
"0","rm(node_stats)"
"0","if(play_audio) beep(sound = 6)"
"0","if(keep_time) toc()"
"1","Extracting node properties: 0.725 sec elapsed
"
