"0","if(keep_time) tic(""taxonomic filtering, step 1"")"
"0",""
"0","# check the nature of the taxonomic table"
"0","# in FMBN you either have ASV tables or tax tables with agglomeration at the species level or above"
"0","# which are the names of the tax levels?"
"0","tax_levels <- c(""domain"",""phylum"",""class"",""order"",""family"",""genus"",""species"")"
"0","# get/set rank names (this is necessary because phyloseq objects from FMBN or from the"
"0","# bioconductor pipeline with SILVA have different names)"
"0",""
"0","physeq_list_2 <- lapply(physeq_list_1, gset_rank_names, tax_levels = tax_levels)"
"1","no change in rank names necessary
"
"1","no change in rank names necessary
"
"1","no change in rank names necessary
"
"1","no change in rank names necessary
"
"1","no change in rank names necessary
"
"0","# remove uncharacterized taxa in all phyloseq objects (using a functional)"
"0","physeq_list_3 <- physeq_list_2"
"0","if(rm_unchar){"
"0","  physeq_list_3 <- lapply(physeq_list_2, subset_taxa, !is.na(domain) & !domain %in% c("""", ""uncharacterized""))"
"0","  physeq_list_3 <- lapply(physeq_list_3, subset_taxa, !is.na(phylum) & !phylum %in% c("""", ""uncharacterized""))"
"0","}"
"0",""
"0","# optionally remove Eukaryotes"
"0","if(rm_euk) {"
"0","  physeq_list_3 <- lapply(physeq_list_3, subset_taxa, domain !=""Eukaryota"")"
"0","}"
"0",""
"0","# optionally remove chloroplasts and mitochondria "
"0","if(rm_chlmit) {"
"0","  physeq_list_3 <- lapply(physeq_list_3, remove_Chl_Mit)"
"0","}"
"0",""
"0","# use lookup table to change taxonomy of Lactobacillus; necessary for phyloseq objects produced with SILVA"
"0","# but not for objects extracted from FMBN (which are transformed before extraction); will also change the "
"0","# taxa names for ASVs"
"0","# MAY BE SLOW"
"0","if(use_lookup){"
"0","  # loop over the list of phyloseq objects"
"0","  for(i in seq_along(physeq_list_3)){"
"0","    # check the length of the names of the taxa; if <100 it is from FMBN, break"
"0","    if(mean(sapply(taxa_names(physeq_list_3[[i]]), nchar),na.rm = T)<100){"
"0","      next"
"0","    } else {"
"0","      # change the names"
"0","      tnames <- str_c(""ASV"",seq(1:ntaxa(physeq_list_3[[i]])))"
"0","      taxa_names(physeq_list_3[[i]])<-tnames"
"0","      # get species to change"
"0","      taxa_table <- as.data.frame(as(tax_table(physeq_list_3[[i]]),""matrix""))"
"0","      taxa_table <- taxa_table %>% mutate(id = str_c(genus, species, sep = "" ""))"
"0","      taxa_table <- left_join(taxa_table, lookup_table)"
"0","      n_changes <- sum(!is.na(taxa_table$new_species))"
"0","      taxa_table <- taxa_table %>% mutate(species = if_else(!is.na(new_species), new_species, species),"
"0","                                          genus = if_else(!is.na(new_genus), new_genus, genus)"
"0","      )"
"0","      # remove columns"
"0","      taxa_table <- dplyr::select(taxa_table, domain:species)"
"0","      # now change genus for Lactobacillus with no species"
"0","      to_change_lb <- which((taxa_table$genus == ""Lactobacillus"") & is.na(taxa_table$species))"
"0","      taxa_table$genus[to_change_lb]<-""Lactobacillus complex"""
"0","      # replace Leuconostocaceae with Lactobacillaceae"
"0","      n_leuc <- nrow(dplyr::filter(taxa_table, family == ""Leuconostocaceae""))"
"0","      taxa_table <- taxa_table %>% mutate(family = ifelse(family == ""Leuconostocaceae"", ""Lactobacillaceae"", family))"
"0","      taxa_table <- as.matrix(taxa_table)"
"0","      rownames(taxa_table)<-tnames"
"0","      tax_table(physeq_list_3[[i]])<-taxa_table"
"0","      if(verbose_output){"
"0","        cat(names(physeq_list_3)[i],"": changed "", n_changes+n_leuc, "" taxa\n"", sep ="""")"
"0","      }"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","# remove further taxa which are uncharacterized at the family to class level"
"0",""
"0","# note for self: might improve it by setting the level at or above which uncharacterized taxa can be removed"
"0","# rather than using a T/F flag"
"0","if(above_genus_flag){"
"0","  physeq_list_3 <- lapply(physeq_list_3, subset_taxa, !is.na(class) & !class %in% c("""", ""uncharacterized"")) # Class"
"0","  physeq_list_3 <- lapply(physeq_list_3, subset_taxa, !is.na(order) & !order %in% c("""", ""uncharacterized"")) # Order"
"0","  physeq_list_3 <- lapply(physeq_list_3, subset_taxa, !is.na(family) & !family %in% c("""", ""uncharacterized"")) # Family"
"0","}"
"0",""
"0","# optionally perform taxonomic agglomeration, "
"0",""
"0","# may take some time; can be made faster with plyr functions using parallelization or with furrr"
"0","physeq_list_4 <- physeq_list_3"
"0","if(taxglom != ""none""){"
"0","  physeq_list_4 <- lapply(physeq_list_3, tax_glom_name_change, taxa_glom = taxglom)"
"0","}"
"0",""
"0","# create third step of the filtering report"
"0","stage_name = ""taxonomic filter+glom"""
"0","for(i in seq_along(physeq_list_0)){"
"0","  if(names(physeq_list_0)[i] %in% names(physeq_list_1)){"
"0","    name <- names(physeq_list_0)[i]"
"0","    stage <- report_step_n(my_physeq = physeq_list_4[[name]], "
"0","                           my_physeq_o = physeq_list_0[[i]], "
"0","                           stage_name = stage_name) "
"0","  } else {"
"0","    stage <- c(stage_name,"
"0","              samples = NA_real_,"
"0","              sequences = NA_real_,"
"0","              taxa = NA_real_,"
"0","              prop_samples = NA_real_,"
"0","              prop_seq = NA_real_,"
"0","              prop_taxa = NA_real_)"
"0","  }"
"0","  filtering_report[[i]] <- rbind(filtering_report[[i]], stage_3 =stage)"
"0","}"
"0",""
"0","if(keep_time) toc()"
"1","taxonomic filtering, step 1: 11.171 sec elapsed
"
"0","if(keep_time) tic(""calculate diversity pre-filter"")"
"0",""
"0","# Calculate diversity prior to filtering for prevalence and abundance"
"0",""
"0","div_est_prefilter <- map_dfr(physeq_list_4, phyloseq::estimate_richness, split = F, measure=c(""Observed"",""Chao1"",""Shannon""))"
"2","The data you have provided does not have
any singletons. This is highly suspicious. Results of richness
estimates (for example) are probably unreliable, or wrong, if you have already
trimmed low-abundance taxa from the data.

We recommended that you find the un-trimmed data and retry."
"2","The data you have provided does not have
any singletons. This is highly suspicious. Results of richness
estimates (for example) are probably unreliable, or wrong, if you have already
trimmed low-abundance taxa from the data.

We recommended that you find the un-trimmed data and retry."
"2","The data you have provided does not have
any singletons. This is highly suspicious. Results of richness
estimates (for example) are probably unreliable, or wrong, if you have already
trimmed low-abundance taxa from the data.

We recommended that you find the un-trimmed data and retry."
"0","div_est_prefilter <- mutate(div_est_prefilter, Pielou_J = Shannon/log(Observed))"
"0","# calculate and add ave Bray-Curtis dissimilarity"
"0","meanbcdist <- map(physeq_list_4, phyloseq::distance, method=""bray"")"
"0","div_est_prefilter$ave_BC <- unlist(map(meanbcdist, mean))"
"0",""
"0","row.names(div_est_prefilter) <- names(physeq_list_4)"
"0","# save for further use"
"0","save(div_est_prefilter, "
"0","     file = paste(file.path(output_folder,out_filename_pref), ""_divprefilter.Rdata"",sep=""""))"
"0",""
"0","if(keep_time) toc()"
"1","calculate diversity pre-filter: 0.201 sec elapsed
"
"0","# Prevalence and abundance filter"
"0","if(keep_time) tic(""taxonomic filtering, step 2"")"
"0",""
"0","# NOTE using a prevalence filter based on fraction may be wrong for studies with large "
"0","# number of samples, in which one might want to retain taxa which appear in >10 samples "
"0",""
"0","physeq_list_5 <- physeq_list_4"
"0","# will be skipped if filterOTUs == F"
"0","node_stat_list <- vector(""list"", length = length(physeq_list_5))"
"0","# a list which will host node stats, like the prevab data, initially empty,"
"0","# if nothing is added at this stage, node stats will be added at a later stage"
"0","if(filterOTUs){"
"0","  prev_ab_list <- vector(""list"", length = length(physeq_list_4))"
"0","  # will host the lists with the results"
"0","  for(i in seq_along(physeq_list_4)){"
"0","    if(verbose_output) cat(""prevalence and abundance filter, physeq "",i,"" of "","
"0","                           length(physeq_list_4),""\n"")"
"0","    prev_ab_list[[i]] <- filter_by_prev_ab("
"0","      myphyseq = physeq_list_4[[i]],"
"0","      name = names(physeq_list_4)[i]"
"0","    )"
"0","    names(prev_ab_list)[i]<-names(physeq_list_4)[i]"
"0","    # save the processed phyloseq"
"0","    physeq_list_5[[i]] <- prev_ab_list[[i]][[1]]"
"0","    # save prev ab table"
"0","    node_stat_list[[i]] <- prev_ab_list[[i]][[4]]"
"0","    names(node_stat_list)[i] <- names(physeq_list_4)[i]"
"0","  }"
"0","}"
"1","prevalence and abundance filter, physeq "
"1"," "
"1","1"
"1"," "
"1"," of "
"1"," "
"1","5"
"1"," "
"1","
"
"2","Joining, by = ""label""
"
"2","Saving 7 x 7 in image
"
"1","prevalence and abundance filter, physeq "
"1"," "
"1","2"
"1"," "
"1"," of "
"1"," "
"1","5"
"1"," "
"1","
"
"1","prevalence and abundance filter, physeq "
"1"," "
"1","3"
"1"," "
"1"," of "
"1"," "
"1","5"
"1"," "
"1","
"
"1","prevalence and abundance filter, physeq "
"1"," "
"1","4"
"1"," "
"1"," of "
"1"," "
"1","5"
"1"," "
"1","
"
"1","prevalence and abundance filter, physeq "
"1"," "
"1","5"
"1"," "
"1"," of "
"1"," "
"1","5"
"1"," "
"1","
"
"0","# optionally save the prev_ab_list"
"0","if(save_prev_ab_list) save(prev_ab_list, "
"0","                           file = paste(file.path(output_folder,out_filename_pref), name, ""_prevabl.Rdata"",sep=""""))"
"0",""
"0","# create fourth step of the filtering report"
"0","stage_name = ""prevalence and abundance"""
"0","for(i in seq_along(physeq_list_0)){"
"0","  if(names(physeq_list_0)[i] %in% names(physeq_list_1)){"
"0","    name <- names(physeq_list_0)[i]"
"0","    stage <- report_step_n(my_physeq = physeq_list_5[[name]], "
"0","                           my_physeq_o = physeq_list_0[[i]], "
"0","                           stage_name = stage_name) "
"0","  } else {"
"0","    stage <- c(stage_name,"
"0","              samples = NA_real_,"
"0","              sequences = NA_real_,"
"0","              taxa = NA_real_,"
"0","              prop_samples = NA_real_,"
"0","              prop_seq = NA_real_,"
"0","              prop_taxa = NA_real_)"
"0","  }"
"0","  filtering_report[[i]] <- rbind(filtering_report[[i]], stage_4 =stage)"
"0","}"
"0",""
"0","# remove unneeded objects"
"0","rm(physeq_list_1, physeq_list_3, physeq_list_4, prev_ab_list, taxa_table)"
"0","# create a data frame with the report"
"0","filtering_report_df <- map_dfr(filtering_report, as.data.frame, .id = ""dataset"")"
"0","filtering_report_df <- filtering_report_df %>% "
"0","  mutate(data_type = if_else(str_detect(dataset, ""FMBN""), ""FMBN"", ""ASV"")) %>%"
"0","  mutate(dplyr::across(.cols = samples:prop_taxa, as.numeric)) %>%"
"0","  mutate(stage = as_factor(stage))"
"0","if(verbose_output) {"
"0","  print(filtering_report_df)"
"0","  print(filtering_report_df %>%"
"0","          dplyr::filter(stage != ""original"" & stage != ""prune samples"") %>%"
"0","          ggplot(mapping = aes(x = data_type, y = prop_taxa)) +"
"0","          facet_wrap(~stage) +"
"0","          geom_boxplot() +"
"0","          labs(x = ""data type"", y = ""prop. taxa left""))"
"0","  summ_filtering <- filtering_report_df %>%"
"0","    group_by(data_type, stage) %>%"
"0","    summarize(min_seq = min(prop_seq), "
"0","              max_seq = max(prop_seq),"
"0","              min_taxa = min(prop_taxa),"
"0","              max_taxa = max(prop_taxa))"
"0","  print(summ_filtering)"
"0","}"
